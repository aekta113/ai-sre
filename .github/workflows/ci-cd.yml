name: AI SRE CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ai-sre:test .
        
    - name: Test container startup
      run: |
        docker run -d --name ai-sre-test -p 8080:8080 ai-sre:test
        sleep 10
        
    - name: Test MCP Server endpoints
      run: |
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/ready || exit 1
        curl -f http://localhost:8080/version || exit 1
        
    - name: Test new API endpoints
      run: |
        # Test CLI tools endpoint
        curl -f http://localhost:8080/cli/tools || exit 1
        
        # Test configuration endpoint
        curl -f http://localhost:8080/config || exit 1
        
        # Test runbook health endpoint
        curl -f http://localhost:8080/runbooks/health || exit 1
        
        # Test storage usage endpoint
        curl -f http://localhost:8080/storage/usage || exit 1
        
        # Test environment endpoint
        curl -f http://localhost:8080/env || exit 1
        
    - name: Test kubectl functionality
      run: |
        # Test kubectl version (should work even without cluster)
        response=$(curl -s -X POST http://localhost:8080/kubectl/version \
          -H "Content-Type: application/json" \
          -d '{}')
        echo "Kubectl response: $response"
        # Check if response contains kubectl version info (success or expected error)
        echo "$response" | grep -q "kubectl" || echo "Warning: kubectl test may have failed"
          
    - name: Test git functionality
      run: |
        # Test git status (may fail in container without git repo - this is expected)
        response=$(curl -s -X POST http://localhost:8080/git/status \
          -H "Content-Type: application/json" \
          -d '{}')
        echo "Git response: $response"
        # Check if response contains git error (expected in container)
        echo "$response" | grep -q "git" || echo "Warning: git test may have failed"
          
    - name: Test flux functionality
      run: |
        # Test flux version
        response=$(curl -s -X POST http://localhost:8080/flux/version \
          -H "Content-Type: application/json" \
          -d '{}')
        echo "Flux response: $response"
        # Check if response contains flux version info
        echo "$response" | grep -q "flux" || echo "Warning: flux test may have failed"
          
    - name: Verify CLI tools
      run: |
        docker exec ai-sre-test kubectl version --client
        docker exec ai-sre-test helm version --client
        docker exec ai-sre-test flux version --client
        docker exec ai-sre-test git --version
        
    - name: Check container stats
      run: |
        docker stats --no-stream ai-sre-test
        
    - name: Cleanup
      if: always()
      run: |
        docker stop ai-sre-test || true
        docker rm ai-sre-test || true

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build image for security scan
      run: |
        docker build -t ai-sre:security-scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ai-sre:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-and-push, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## 🚀 AI SRE ${{ steps.version.outputs.VERSION }} - Automated Release" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### ✨ What's New" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "This release includes:" >> $GITHUB_OUTPUT
        echo "- 🐳 Automated Docker image builds for multiple architectures" >> $GITHUB_OUTPUT
        echo "- 🧪 Comprehensive CI/CD pipeline with automated testing" >> $GITHUB_OUTPUT
        echo "- 🔒 Security scanning with Trivy vulnerability scanner" >> $GITHUB_OUTPUT
        echo "- 📦 Multi-arch Docker images (linux/amd64, linux/arm64)" >> $GITHUB_OUTPUT
        echo "- 🚀 GitHub Container Registry integration" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🏗️ CI/CD Pipeline Features" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "- **Automated Testing**: Quick, comprehensive, and integration tests" >> $GITHUB_OUTPUT
        echo "- **Multi-Architecture Builds**: Support for AMD64 and ARM64" >> $GITHUB_OUTPUT
        echo "- **Security Scanning**: Automated vulnerability scanning" >> $GITHUB_OUTPUT
        echo "- **Container Registry**: Automated pushes to GitHub Container Registry" >> $GITHUB_OUTPUT
        echo "- **Release Automation**: Automatic release creation on tag push" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📦 Docker Images" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Available on GitHub Container Registry:" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Pull the latest image" >> $GITHUB_OUTPUT
        echo "docker pull ghcr.io/${{ github.repository }}:latest" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Pull specific version" >> $GITHUB_OUTPUT
        echo "docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🧪 Testing" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "All tests pass automatically in CI/CD pipeline:" >> $GITHUB_OUTPUT
        echo "- ✅ Container build and startup" >> $GITHUB_OUTPUT
        echo "- ✅ MCP Server API endpoints" >> $GITHUB_OUTPUT
        echo "- ✅ CLI tools functionality" >> $GITHUB_OUTPUT
        echo "- ✅ Security vulnerability scanning" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🔧 Usage" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Run the container" >> $GITHUB_OUTPUT
        echo "docker run -d --name ai-sre \\" >> $GITHUB_OUTPUT
        echo "  -p 8080:8080 \\" >> $GITHUB_OUTPUT
        echo "  -v ~/.kube:/app/.kube:ro \\" >> $GITHUB_OUTPUT
        echo "  ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Test the API" >> $GITHUB_OUTPUT
        echo "curl http://localhost:8080/health" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "---" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**Built with ❤️ using GitHub Actions**" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: AI SRE ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
        generate_release_notes: true
