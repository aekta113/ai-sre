name: Multi-Platform Testing

on:
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          - os: macos-latest
            arch: arm64  # GitHub doesn't support ARM64 macOS runners yet
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build --platform linux/${{ matrix.arch }} -t ai-sre:test-${{ matrix.arch }} .
        
    - name: Test container startup
      run: |
        docker run -d --name ai-sre-test-${{ matrix.arch }} -p 8080:8080 ai-sre:test-${{ matrix.arch }}
        sleep 10
        
    - name: Test MCP Server endpoints
      run: |
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/ready || exit 1
        curl -f http://localhost:8080/version || exit 1
        
    - name: Test new API endpoints
      run: |
        # Test CLI tools endpoint
        curl -f http://localhost:8080/cli/tools || exit 1
        
        # Test configuration endpoint
        curl -f http://localhost:8080/config || exit 1
        
        # Test runbook health endpoint
        curl -f http://localhost:8080/runbooks/health || exit 1
        
        # Test storage usage endpoint
        curl -f http://localhost:8080/storage/usage || exit 1
        
        # Test environment endpoint
        curl -f http://localhost:8080/env || exit 1
        
    - name: Test kubectl functionality
      run: |
        # Test kubectl version (should work even without cluster)
        response=$(curl -s -X POST http://localhost:8080/kubectl/version \
          -H "Content-Type: application/json" \
          -d '{}')
        echo "Kubectl response: $response"
        # Check if response contains kubectl version info (success or expected error)
        echo "$response" | grep -q "kubectl" || echo "Warning: kubectl test may have failed"
          
    - name: Test git functionality
      run: |
        # Test git status (may fail in container without git repo - this is expected)
        response=$(curl -s -X POST http://localhost:8080/git/status \
          -H "Content-Type: application/json" \
          -d '{}')
        echo "Git response: $response"
        # Check if response contains git error (expected in container)
        echo "$response" | grep -q "git" || echo "Warning: git test may have failed"
          
    - name: Test flux functionality
      run: |
        # Test flux version
        response=$(curl -s -X POST http://localhost:8080/flux/version \
          -H "Content-Type: application/json" \
          -d '{}')
        echo "Flux response: $response"
        # Check if response contains flux version info
        echo "$response" | grep -q "flux" || echo "Warning: flux test may have failed"
          
    - name: Verify CLI tools
      run: |
        docker exec ai-sre-test-${{ matrix.arch }} kubectl version --client
        docker exec ai-sre-test-${{ matrix.arch }} helm version --client
        docker exec ai-sre-test-${{ matrix.arch }} flux version --client
        docker exec ai-sre-test-${{ matrix.arch }} git --version
        
    - name: Check container stats
      run: |
        docker stats --no-stream ai-sre-test-${{ matrix.arch }}
        
    - name: Cleanup
      if: always()
      run: |
        docker stop ai-sre-test-${{ matrix.arch }} || true
        docker rm ai-sre-test-${{ matrix.arch }} || true
