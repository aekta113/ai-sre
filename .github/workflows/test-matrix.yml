name: Multi-Platform Testing

on:
  pull_request:
    branches: [ master, main ]
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          - os: macos-latest
            arch: arm64  # GitHub doesn't support ARM64 macOS runners yet
          - os: macos-latest
            arch: amd64  # Docker not available on macOS runners
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker buildx build --platform linux/${{ matrix.arch }} -t ai-sre:test-${{ matrix.arch }} --load .
        
    - name: Test container startup
      if: matrix.arch == 'amd64'
      run: |
        docker run -d --name ai-sre-test-${{ matrix.arch }} -p 8080:8080 ai-sre:test-${{ matrix.arch }}
        sleep 10
        
    - name: Test MCP Server endpoints
      if: matrix.arch == 'amd64'
      run: |
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Test MCP protocol initialization
        response=$(curl -s -X POST http://localhost:8080/mcp/http \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc": "2.0", "id": 1, "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test-client", "version": "1.0.0"}}}')
        echo "MCP Initialize response: $response"
        echo "$response" | grep -q "protocolVersion" || exit 1
        
        # Test MCP tools list
        response=$(curl -s -X POST http://localhost:8080/mcp/http \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc": "2.0", "id": 2, "method": "tools/list", "params": {}}')
        echo "MCP Tools list response: $response"
        echo "$response" | grep -q "kubectl_get" || exit 1
        
    - name: Test MCP tools functionality
      if: matrix.arch == 'amd64'
      run: |
        # Wait a bit more for container to be fully ready
        sleep 5
        
        # Test health_check tool
        response=$(curl -s -X POST http://localhost:8080/mcp/http \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc": "2.0", "id": 3, "method": "tools/call", "params": {"name": "health_check", "arguments": {}}}')
        echo "Health check tool response: $response"
        echo "$response" | grep -q "healthy" || echo "Warning: health_check tool may have issues"
        
        # Test kubectl_get tool (expected to fail without cluster)
        response=$(curl -s -X POST http://localhost:8080/mcp/http \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc": "2.0", "id": 4, "method": "tools/call", "params": {"name": "kubectl_get", "arguments": {"resource": "pods"}}}')
        echo "Kubectl get tool response: $response"
        echo "$response" | grep -q "success" || echo "Warning: kubectl_get tool may have issues"
        
        # Test git_status tool (expected to fail without repo)
        response=$(curl -s -X POST http://localhost:8080/mcp/http \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc": "2.0", "id": 5, "method": "tools/call", "params": {"name": "git_status", "arguments": {}}}')
        echo "Git status tool response: $response"
        echo "$response" | grep -q "success" || echo "Warning: git_status tool may have issues"
        
        # Test flux_status tool
        response=$(curl -s -X POST http://localhost:8080/mcp/http \
          -H "Content-Type: application/json" \
          -d '{"jsonrpc": "2.0", "id": 6, "method": "tools/call", "params": {"name": "flux_status", "arguments": {}}}')
        echo "Flux status tool response: $response"
        echo "$response" | grep -q "success" || echo "Warning: flux_status tool may have issues"
          
    - name: Verify CLI tools
      if: matrix.arch == 'amd64'
      run: |
        docker exec ai-sre-test-${{ matrix.arch }} kubectl version --client
        docker exec ai-sre-test-${{ matrix.arch }} helm version --client
        docker exec ai-sre-test-${{ matrix.arch }} flux version --client
        docker exec ai-sre-test-${{ matrix.arch }} git --version
        
    - name: Check container stats
      if: matrix.arch == 'amd64'
      run: |
        docker stats --no-stream ai-sre-test-${{ matrix.arch }}
        
    - name: Cleanup
      if: always() && matrix.arch == 'amd64'
      run: |
        docker stop ai-sre-test-${{ matrix.arch }} || true
        docker rm ai-sre-test-${{ matrix.arch }} || true
